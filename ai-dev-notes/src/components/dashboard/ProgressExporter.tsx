"use client";

import { LearningProgress } from '@/types/dashboard';

interface ProgressExporterProps {
  progress: LearningProgress;
}

export default function ProgressExporter({ progress }: ProgressExporterProps) {
  const exportToJSON = () => {
    const dataStr = JSON.stringify(progress, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `learning-progress-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const exportToCSV = () => {
    const assessments = progress.assessments.map(assessment => ({
      Date: assessment.date.toISOString().split('T')[0],
      'Topics Assessed': assessment.topicsAssessed.join('; '),
      Score: assessment.score.toFixed(2),
      'Questions Count': assessment.questions.length,
      'Duration (minutes)': Math.round(assessment.duration / 60),
      'Completion Rate %': assessment.completionRate.toFixed(1),
      'Tokens Used': assessment.openAITokensUsed,
      Model: assessment.model
    }));

    if (assessments.length === 0) {
      alert('No assessment data to export');
      return;
    }

    const headers = Object.keys(assessments[0]);
    const csvContent = [
      headers.join(','),
      ...assessments.map(row =>
        headers.map(header => `"${row[header as keyof typeof row]}"`).join(',')
      )
    ].join('\n');

    const dataBlob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `assessment-history-${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const generateReport = () => {
    const reportContent = `
# Learning Progress Report
Generated on: ${new Date().toLocaleDateString()}

## Summary
- Total Assessments: ${progress.totalAssessments}
- Average Score: ${progress.averageScore.toFixed(2)}/10
- Learning Streak: ${progress.streak.currentStreak} days
- Total Tokens Used: ${progress.tokenUsage.totalTokens.toLocaleString()}
- Estimated AI Cost: $${progress.tokenUsage.estimatedCost.toFixed(4)}

## Skill Levels
- **React**: Level ${progress.skillLevels.react.level}/10 (${progress.skillLevels.react.progress}% progress)
- **Next.js**: Level ${progress.skillLevels.nextjs.level}/10 (${progress.skillLevels.nextjs.progress}% progress)
- **AI Tools**: Level ${progress.skillLevels.aiTools.level}/10 (${progress.skillLevels.aiTools.progress}% progress)

## Recent Assessments
${progress.assessments.slice(-5).map(assessment => `
### ${assessment.topicsAssessed.join(', ')} Assessment
- Date: ${assessment.date.toLocaleDateString()}
- Score: ${assessment.score.toFixed(1)}/10
- Duration: ${Math.round(assessment.duration / 60)} minutes
- Questions: ${assessment.questions.length}
- Feedback: ${assessment.feedback}
`).join('\n')}

## Active Recommendations
${progress.recommendations.filter(rec => !rec.completed).slice(0, 5).map(rec => `
### ${rec.title}
- **Priority**: ${rec.priority}
- **Skill Area**: ${rec.skillArea}  
- **Time**: ~${rec.estimatedTime} minutes
- **Description**: ${rec.description}
`).join('\n')}

## Goals
${progress.goals.map(goal => `
- Target Skill Level: ${goal.targetSkillLevel}/10
- Deadline: ${goal.deadline ? goal.deadline.toLocaleDateString() : 'No deadline'}
- Description: ${goal.description}
`).join('\n')}

---
*Report generated by Learning Dashboard powered by GPT-4o-mini*
`;

    const dataBlob = new Blob([reportContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `learning-report-${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
          Export Progress
        </h3>
        <span className="text-2xl">ðŸ“Š</span>
      </div>
      
      <p className="text-gray-600 dark:text-gray-400 mb-6">
        Export your learning progress and assessment data in various formats for backup or analysis.
      </p>

      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
        <button
          onClick={exportToJSON}
          className="flex flex-col items-center p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          <div className="text-2xl mb-2">ðŸ“„</div>
          <div className="font-medium text-blue-900 dark:text-blue-100">JSON Export</div>
          <div className="text-sm text-blue-600 dark:text-blue-400 text-center">
            Complete data backup
          </div>
        </button>

        <button
          onClick={exportToCSV}
          disabled={progress.assessments.length === 0}
          className="flex flex-col items-center p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg hover:bg-green-100 dark:hover:bg-green-900/30 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div className="text-2xl mb-2">ðŸ“Š</div>
          <div className="font-medium text-green-900 dark:text-green-100">CSV Export</div>
          <div className="text-sm text-green-600 dark:text-green-400 text-center">
            Assessment history
          </div>
        </button>

        <button
          onClick={generateReport}
          className="flex flex-col items-center p-4 bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg hover:bg-purple-100 dark:hover:bg-purple-900/30 transition-colors"
        >
          <div className="text-2xl mb-2">ðŸ“‹</div>
          <div className="font-medium text-purple-900 dark:text-purple-100">Progress Report</div>
          <div className="text-sm text-purple-600 dark:text-purple-400 text-center">
            Detailed summary
          </div>
        </button>
      </div>

      <div className="mt-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
        <h4 className="font-medium text-gray-900 dark:text-white mb-2">Export Information</h4>
        <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
          <li>â€¢ JSON: Complete backup of all progress data</li>
          <li>â€¢ CSV: Assessment history for spreadsheet analysis</li>
          <li>â€¢ Report: Human-readable summary in Markdown format</li>
        </ul>
      </div>
    </div>
  );
}